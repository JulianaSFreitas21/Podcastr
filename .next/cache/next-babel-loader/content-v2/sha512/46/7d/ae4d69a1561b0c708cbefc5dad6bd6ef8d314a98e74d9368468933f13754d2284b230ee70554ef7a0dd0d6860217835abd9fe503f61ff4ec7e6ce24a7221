{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Juliana\\\\Documents\\\\GitHub\\\\Podcastr\\\\src\\\\contexts\\\\Player.Context.tsx\";\nimport { createContext, useState } from 'react';\nexport const PlayerContext = /*#__PURE__*/createContext({}); // definir o fromato do valor\n\nexport function PlayerContextProvider({\n  children\n}) {\n  const {\n    0: episodeList,\n    1: setEpisodeList\n  } = useState([]);\n  const {\n    0: currentEpisodeIndex,\n    1: setCurrentEpisodeIndex\n  } = useState(0);\n  const {\n    0: isPlaying,\n    1: setIsPlaying\n  } = useState(false);\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  const hasPrevious = currentEpisodeIndex > 0;\n  const hasNext = currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList,\n      currentEpisodeIndex,\n      play,\n      playList,\n      isPlaying,\n      playNext,\n      playPrevious,\n      togglePlay,\n      setPlayingState,\n      hasPrevious,\n      hasNext\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/Juliana/Documents/GitHub/Podcastr/src/contexts/Player.Context.tsx"],"names":["createContext","useState","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","play","episode","playList","list","index","togglePlay","setPlayingState","state","hasPrevious","hasNext","length","playNext","playPrevious"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAmD,OAAnD;AAwBA,OAAO,MAAMC,aAAa,gBAAGF,aAAa,CAAC,EAAD,CAAnC,C,CAA8D;;AAMrE,OAAO,SAASG,qBAAT,CAA+B;AAACC,EAAAA;AAAD,CAA/B,EAAuE;AAC5E,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCL,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAA,OAACM,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDP,QAAQ,CAAC,CAAD,CAA9D;AACA,QAAM;AAAA,OAACQ,SAAD;AAAA,OAAYC;AAAZ,MAA4BT,QAAQ,CAAC,KAAD,CAA1C;;AAEA,WAASU,IAAT,CAAcC,OAAd,EAAuB;AACrBN,IAAAA,cAAc,CAAC,CAACM,OAAD,CAAD,CAAd;AACAJ,IAAAA,sBAAsB,CAAC,CAAD,CAAtB;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASG,QAAT,CAAkBC,IAAlB,EAAmCC,KAAnC,EAAkD;AAChDT,IAAAA,cAAc,CAACQ,IAAD,CAAd;AACAN,IAAAA,sBAAsB,CAACO,KAAD,CAAtB;AACAL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASM,UAAT,GAAqB;AACnBN,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AAED,WAASQ,eAAT,CAAyBC,KAAzB,EAAwC;AACtCR,IAAAA,YAAY,CAACQ,KAAD,CAAZ;AACD;;AAED,QAAMC,WAAW,GAAGZ,mBAAmB,GAAG,CAA1C;AACA,QAAMa,OAAO,GAAIb,mBAAmB,GAAG,CAAvB,GAA4BF,WAAW,CAACgB,MAAxD;;AAEA,WAASC,QAAT,GAAmB;AACjB,QAAGF,OAAH,EAAW;AACTZ,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;AACF;;AAED,WAASgB,YAAT,GAAuB;AACrB,QAAGJ,WAAH,EAAe;AACbX,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;AACF;;AAED,sBACE,QAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EACH;AACEF,MAAAA,WADF;AAEEE,MAAAA,mBAFF;AAGEI,MAAAA,IAHF;AAIEE,MAAAA,QAJF;AAKEJ,MAAAA,SALF;AAMEa,MAAAA,QANF;AAOEC,MAAAA,YAPF;AAQEP,MAAAA,UARF;AASEC,MAAAA,eATF;AAUEE,MAAAA,WAVF;AAWEC,MAAAA;AAXF,KAFJ;AAAA,cAgBGhB;AAhBH;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD","sourcesContent":["import { createContext, useState, ReactNode } from 'react';\r\n\r\ntype Episode = {\r\n  title: string,\r\n  members: string,\r\n  thumbnail: string,\r\n  duration: number,\r\n  url: string,\r\n}\r\n\r\ntype PlayerContextData= {\r\n  episodeList: Episode[];\r\n  currentEpisodeIndex: number;\r\n  isPlaying: boolean;\r\n  play: (episode: Episode) => void;\r\n  playList: (list: Episode[], index: number) => void;\r\n  setPlayingState: (state: boolean) => void;\r\n  togglePlay: () => void;\r\n  playNext: () => void;\r\n  playPrevious: () => void;\r\n  hasPrevious: boolean,\r\n  hasNext: boolean\r\n}\r\n\r\nexport const PlayerContext = createContext({} as PlayerContextData); // definir o fromato do valor\r\n\r\ntype PlayerContextProviderProps = {\r\n  children: ReactNode;\r\n}\r\n\r\nexport function PlayerContextProvider({children}: PlayerContextProviderProps) {\r\n  const [episodeList, setEpisodeList] = useState([]);\r\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n  function play(episode) {\r\n    setEpisodeList([episode]);\r\n    setCurrentEpisodeIndex(0);\r\n    setIsPlaying(true);\r\n  }\r\n\r\n  function playList(list: Episode[], index: number) {\r\n    setEpisodeList(list);\r\n    setCurrentEpisodeIndex(index);\r\n    setIsPlaying(true);\r\n  }\r\n\r\n  function togglePlay(){\r\n    setIsPlaying(!isPlaying);\r\n  }\r\n\r\n  function setPlayingState(state: boolean){\r\n    setIsPlaying(state);\r\n  }\r\n\r\n  const hasPrevious = currentEpisodeIndex > 0;\r\n  const hasNext = (currentEpisodeIndex + 1) < episodeList.length;\r\n\r\n  function playNext(){\r\n    if(hasNext){\r\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\r\n    }\r\n  }\r\n\r\n  function playPrevious(){\r\n    if(hasPrevious){\r\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <PlayerContext.Provider \r\n      value={\r\n        { \r\n          episodeList, \r\n          currentEpisodeIndex, \r\n          play, \r\n          playList,\r\n          isPlaying,\r\n          playNext,\r\n          playPrevious,\r\n          togglePlay, \r\n          setPlayingState,\r\n          hasPrevious,\r\n          hasNext\r\n        }\r\n      }>\r\n      {children}\r\n    </PlayerContext.Provider>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}